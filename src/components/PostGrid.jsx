import React from 'react';
import { FaPlay, FaPause } from 'react-icons/fa';
import './PostGrid.css';

function PostGrid({ post, onPostClick, playingVideo, onVideoPlay }) {
  // Ê∑ªÂä†Â§áÁî®ÂõæÁâáURL
  const fallbackImageUrl = "https://images.unsplash.com/photo-1639762681057-408e52192e55?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2232&q=80";
  const web3FallbackImage = "https://images.unsplash.com/photo-1639762681485-074b7f938ba0?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2232&q=80";

  const handleVideoPlay = (event) => {
    event.stopPropagation();
    const videoEl = document.getElementById(`video-${post.id}`);
    if (videoEl) {
      onVideoPlay(post.id, videoEl);
    }
  };

  // Â§ÑÁêÜÂõæÁâáÂä†ËΩΩÂ§±Ë¥•
  const handleImageError = (e) => {
    e.target.onerror = null; // Èò≤Ê≠¢Êó†ÈôêÂæ™ÁéØ
    e.target.src = web3FallbackImage; // ‰ΩøÁî®web3ÁöÑÁΩëÈ°µÂõæÁâá‰Ωú‰∏∫Â§áÁî®
  };

  // Â§ÑÁêÜÂ§¥ÂÉèÂä†ËΩΩÂ§±Ë¥• - Ê®°‰ªøMyPageÁöÑÊñπÊ≥ï
  const handleAvatarError = (e) => {
    e.target.onerror = null; // Èò≤Ê≠¢Êó†ÈôêÂæ™ÁéØ
    e.target.src = 'https://ui-avatars.com/api/?name=' + encodeURIComponent(getAuthorName() || 'User'); // ‰ΩøÁî®Âü∫‰∫éÁî®Êà∑ÂêçÁîüÊàêÁöÑÂ§¥ÂÉè
  };

  // Ëé∑ÂèñÂ™í‰ΩìURL (Â§ÑÁêÜÂçï‰∏™URLÊàñURLÊï∞ÁªÑ)
  const getMediaUrl = () => {
    if (post.file_paths && post.file_paths.length > 0) {
      return post.file_paths[0]; // ‰ΩøÁî®Á¨¨‰∏Ä‰∏™Êñá‰ª∂Ë∑ØÂæÑ
    } else if (post.media) {
      return post.media; // ÂÖºÂÆπÊóßÊï∞ÊçÆÁªìÊûÑ
    }
    return '';
  };

  // Ëé∑ÂèñÁº©Áï•ÂõæURL
  const getThumbnailUrl = () => {
    if (post.thumbnail) {
      return post.thumbnail;
    } else if (post.file_paths && post.file_paths.length > 0) {
      return post.file_paths[0]; // ‰ΩøÁî®Á¨¨‰∏Ä‰∏™Êñá‰ª∂‰Ωú‰∏∫Áº©Áï•Âõæ
    }
    return '';
  };

  // Ëé∑Âèñ‰ΩúËÄÖÂêçÁß∞
  const getAuthorName = () => {
    return post.user_name || post.author || 'Anonymous';
  };

  // Ëé∑ÂèñÈ¢ÑËßàÊñáÊú¨
  const getPreviewText = () => {
    return post.summary || post.preview || '';
  };

  // Ëé∑ÂèñÊó∂Èó¥Êà≥
  const getTimestamp = () => {
    return post.created_at || post.timestamp || new Date().toISOString();
  };

  // Ëé∑ÂèñÂ™í‰ΩìÁ±ªÂûã
  const getMediaType = () => {
    return post.media_type || post.mediaType || 'image';
  };

  // Ëé∑ÂèñÂ§¥ÂÉèURL
  const getAvatarUrl = () => {
    return post.user_avatar || post.avatar || '';
  };

  // Ê†ºÂºèÂåñÊó∂Èó¥‰∏∫‰∏≠ÂõΩÊó∂Èó¥
  const formatChineseTime = (timestamp) => {
    if (!timestamp) return '';
    
    // ÂàõÂª∫Êó•ÊúüÂØπË±° - Ëá™Âä®Â§ÑÁêÜ ISO Ê†ºÂºèÂíåÊó∂Âå∫
    const date = new Date(timestamp);
    
    // Ê†ºÂºèÂåñ‰∏∫‰∏≠ÂõΩÊó•ÊúüÊ†ºÂºè
    return date.toLocaleString('zh-CN', { 
      timeZone: 'Asia/Shanghai',
      year: 'numeric', 
      month: '2-digit', 
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Ëé∑ÂèñÊñáÊ°£Á±ªÂûãÁöÑÂ§áÁî®ÂõæÁâá
  const getDocumentFallbackImage = () => {
    return "https://images.unsplash.com/photo-1639762681057-408e52192e55?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2232&q=80";
  };

  // Ëé∑ÂèñËßÜÈ¢ëÁ±ªÂûãÁöÑÂ§áÁî®ÂõæÁâá (‰ΩøÁî®‰∏çÂêåÁöÑÁΩëÂõæ)
  const getVideoFallbackImage = () => {
    return "https://images.unsplash.com/photo-1611162616475-46b635cb6868?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2074&q=80";
  };

  return (
    <div 
      className="forum-post-card" 
      data-aos="fade-up"
      onClick={(e) => onPostClick(post.id, e)}
      style={{ cursor: 'pointer' }}
    >
      <div className="post-glow"></div>
      
      {(post.media || (post.file_paths && post.file_paths.length > 0)) && (
        <div className="forum-post-media">
          {getMediaType() === 'image' ? (
            <img 
              src={getMediaUrl()} 
              alt={post.title}
              className="forum-post-image"
              onError={handleImageError}
            />
          ) : getMediaType() === 'video' ? (
            <div className="forum-post-video-container">
              <img 
                src={getVideoFallbackImage()}
                alt={post.title}
                className="forum-post-image"
                onError={handleImageError}
              />
              <div className="video-type-indicator">Video</div>
              <button 
                className="forum-post-video-play"
                onClick={handleVideoPlay}
              >
                {playingVideo?.id === post.id ? <FaPause /> : <FaPlay />}
              </button>
            </div>
          ) : getMediaType() === 'document' ? (
            <div className="forum-post-document">
              <img 
                src={getDocumentFallbackImage()} 
                alt={post.title}
                className="forum-post-image"
                onError={handleImageError}
              />
              <div className="document-type-indicator">Document</div>
            </div>
          ) : null}
        </div>
      )}

      <div className="forum-post-header">
        <h3 className="forum-post-title">{post.title}</h3>
        <div className="forum-post-meta">
          <span className="forum-post-author">
            <span className="forum-post-author-avatar">
              {getAvatarUrl() ? (
                <img 
                  src={getAvatarUrl()} 
                  alt={getAuthorName()} 
                  className="forum-post-avatar-img" 
                  onError={handleAvatarError}
                />
              ) : (
                getAuthorName().charAt(0)
              )}
            </span>
            {getAuthorName()}
          </span>
          <span className="forum-post-time">
            {formatChineseTime(getTimestamp())}
          </span>
        </div>
      </div>
      
      <p className="forum-post-preview">{getPreviewText()}</p>
      
      <div className="forum-post-footer">
        <div className="forum-post-tags">
          {(post.tags || []).map(tag => (
            <span key={tag} className="forum-post-tag">#{tag}</span>
          ))}
        </div>
        
        <div className="forum-post-stats">
          <span className="forum-stat-item">
            <span className="stat-icon">üëç</span>
            {post.likes || 0}
          </span>
          <span className="forum-stat-item">
            <span className="stat-icon">üí¨</span>
            {post.comments || 0}
          </span>
        </div>
      </div>
    </div>
  );
}

export default PostGrid;